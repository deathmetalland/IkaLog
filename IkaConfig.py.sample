#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
#
#  IkaLog
#  ======
#  Copyright (C) 2016 Takeshi HASEGAWA
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# IkaConfig.py: Configuration file for IkaLog CLI Version
# - Copy this file to IkaConfig.py as modified as you need.
# - Please see https://github.com/hasegaw/IkaLog/wiki/en_IkaConfig
#   for details.

#############################################################################
## Input Source Configuration
#############################################################################
#
# - Uncomment the "INPUT_SOUCE = ..." line you would like to enable.
#   INPUT_SOURCE can be overrided in console optioni (e.g. --input CVFile)
# - Don't forget to fill your THE_DEVICE_ID.
#

INPUT_SOURCE = None
INPUT_ARGS = {}

# DirectShow
#
# INPUT_SOURCE = 'DirectShow'
INPUT_ARGS['DirectShow'] = {'device': 'THE_DEVICE_ID'}

# OpenCV VideoCapture
#
# INPUT_SOURCE = 'CVCapture'
INPUT_ARGS['CVCapture'] = {'device': 'THE_DEVICE_ID'}

# ScreenCapture (for Windows)
# Press C key in preview window to detect your WiiU screen.
#
# INPUT_SOURCE = 'ScreenCapture'
INPUT_ARGS['ScreenCapture'] = {}

# AVFoundationCapture (for Mac OS X)
# Tested with: BlackMagic Design Ultra Mini Recorder, Intensity Shuttle
#
# INPUT_SOURCE = 'AVFoundationCapture'
INPUT_ARGS['AVFoundationCapture'] = {'source': 'THE_DEVICE_ID'}

# CVFile: Read a video file
# - You need OpenCV runtime with ffmpeg integration.
# - You can override source filename with --input_file options.
#
# INPUT_SOURCE = 'CVFile'
INPUT_ARGS['CVFile'] = {
    'source': 'video.avi',
    'frame_rate': 10,
    # Use input file's timestamp instead of the current time.
    'use_file_timestamp': True,
}

# GStreamer: Read from GStreamer
# - You need OpenCV runtime with GStreamer support.
#
# INPUT_SOURCE = 'GStreamer'
#
# To read from Blackmagic Design DeckLink device #0 (720p, 59.94fps):
# INPUT_ARGS['GStreamer'] = {'source': 'decklinksrc connection=hdmi mode=720p5994 device-number=0 ! videoconvert ! appsink'}
#
# To test GStreamer source with videotestsrc source:
INPUT_ARGS['GStreamer'] = {'source': 'videotestsrc ! videoconvert ! appsink'}

# ----------------------------------------------------------------------

SOURCE_ARGS = {}

# Offset source image. (for some weird capture devices)
#
# SOURCE_ARGS['offset'] = (2, 0)  # SANKO HDMVC4UC (Offset to right for 2px)

# Limit the number of frames per second to process
# - Generally processing more frames makes more accurate results.
#   Less frames make processing speed faster but sacrifies the accuracy.
# - 10 frames per second is sufficient in most case.
#
# SOURCE_ARGS['frame_rate'] = 10


#############################################################################
## Plugins Configurations
#############################################################################

# Variables:
#
# __INPUT_FILE__ : The value specified by --input_file flag.
#   If the command is 'IkaLog.py --input_file=/tmp/video.mp4',
#   '__INPUT_FILE__.txt' becomes '/tmp/video.mp4.txt'.


OUTPUT_PLUGINS = []
OUTPUT_ARGS = {}

# Screen: Preview
#   wait_ms=n             Wait time[msec] or 0 (Update every two seconds)
#   size=(width, height)  Geometry of preview area.
OUTPUT_PLUGINS.append('Screen')
OUTPUT_ARGS['Screen'] = {'wait_ms': 1, 'size': (1280, 720)}

# Console(): Show messages in Console.
#
OUTPUT_PLUGINS.append('Console')
OUTPUT_ARGS['Console'] = {}

# IkaOutput_CSV: Write CSV log.
#
OUTPUT_PLUGINS.append('CSV')
OUTPUT_ARGS['CSV'] = {'csv_filename': 'ika.csv'}

# Fluentd: Forward to Fluentd.
#
# OUTPUT_PLUGINS.append('Fluentd')
OUTPUT_ARGS['Fluentd'] = {
    'host': '127.0.0.1',
    'port': 24224,
    'username': '＜8ヨ',
    'tag': 'ikalog'
}

# OUTPUT_PLUGINS.append('Hue')
OUTPUT_ARGS['Hue'] = {'host': '192.168.0.1', 'user': 'newdeveloper'}

# JSON: Write JSON log.
#  json_filename  output file name.  --output_json is the commandline flag.
#  append_data    whether the output is appended to the file or overwrites.
OUTPUT_PLUGINS.append('JSON')
OUTPUT_ARGS['JSON'] = {
    'json_filename': 'ika.json',
    'append_data': True,
}

# Screenshot: Save scoreboard screenshots.
#
OUTPUT_PLUGINS.append('Screenshot')
OUTPUT_ARGS['Screenshot'] = {'dest_dir': './screenshots/'}

# Slack: Slack Integration
#   url='http://....'   Slack の Inconming Web Hook URL
#   username='botname'  Slack 上に出す bot 名
#
# OUTPUT_PLUGINS.append('Slack')
OUTPUT_ARGS['Slack'] = {
  'url': 'https://hooks.slack.com/services/(incoming hook endpoint)'
}

# StatInk: stat.ink Integration (スプラトゥーンプレイ実績投稿サイト)
#   api_key  APIキー。 https://stat.ink/ に登録し取得してください
#   dry_run  Trueの場合 stat.ink に送信しない(テストモード)
#   track_special_gauge スペシャルゲージの時系列情報を送信する
#   track_special_weapon スペシャル発動の時系列情報を送信する
#   track_splatzone  ガチエリアの時系列情報を送信する
#   track_objective  ヤグラ／ホコの時系列情報を送信する
#   track_inklings   インクリング生死の時系列情報を送信する
#   video_id         関連ページとするYoutubeのvideoid コマンドラインから --video_id で指定可能
#
# OUTPUT_PLUGINS.append('StatInk')
OUTPUT_ARGS['StatInk'] = {
    'api_key': 'YOUR_API_KEY_HERE',
    'dry_run': False,
    'track_special_gauge': False,
    'track_special_weapon': False,
    'track_splatzone': False,
    'track_objective': False,
    'track_inklings': False,
    'video_id': None,
    'payload_file': None,
}

# Twitter: Twitter Integration
#
# OUTPUT_PLUGINS.append('Twitter')
OUTPUT_ARGS['Twitter'] = {
    'consumer_key': 'YOUR_CONSUMER_TOKEN',
    'consumer_secret': 'YOUR_CONSUMER_SECRET',
    'access_token': 'YOUR_ACCESS_TOKE',
    'access_token_secret': 'YOUR_ACCESS_TOKE_SECRET',
    'attach_image': False,
    'footer': 'マンメンミ',
    'tweet_my_score': False,
    'tweet_kd': False,
    'tweet_udemae': False,
    'use_reply': True,
}

# WebSocket Server
#
OUTPUT_PLUGINS.append('WebSocketServer')
OUTPUT_ARGS['WebSocketServer'] = {'enabled': True}

# VideoRecorder
# - This plugin starts/stops automatically video recording.
# - This plugin works with AmarecTV and OBS.
# - This plugin requires Windows and Autoit.
#
#OUTPUT_PLUGINS.append('VideoRecorder')
OUTPUT_ARGS['VideoRecorder'] = {
    'control_obs': 'C:/IkaLog/tools/ControlAmarecTV.au3',
    'dir': 'C:/IkaLog/videos',
}

# Description: Video description for YouTube.
# - It is expected to be used with input.CVFile.
# - Streaming mode, or Multiple matches in a video is not tested.
#
# OUTPUT_PLUGINS.append('Description')
OUTPUT_ARGS['Description'] = {'output_filepath': 'description.txt'}

# DebugLog: Debug log in console.
#
# OUTPUT_PLUGINS.append('DebugLog')
OUTPUT_ARGS['DebugLog'] = {'dir': './screenshots/', 'screenshot': False}

# DebugVideoWriter: Video Recorder for debugging (aka flight recorder)
# Press V key in preview window to toggle record.
#
# OUTPUT_PLUGINS.append('DebugVideoWriter')
OUTPUT_ARGS['DebugVideoWriter'] = {'dir': './debug_videos/'}

# PreviewDetected: Draw rect in preview when IkaLog detected something
#
# OUTPUT_PLUGINS.append('PreviewDetected')
OUTPUT_ARGS['PreviewDetected'] = {}

# Boyomi: Narration by Boyomichan, Japanese text speech app.
#
# OUTPUT_PLUGINS.append('Boyomi')
OUTPUT_ARGS['Boyomi'] = {
    'host': '127.0.0.1',
    'port': 50001,
}

# MikuMikuMouth: Narration by Miku Miku Mouth
#
# OUTPUT_PLUGINS.append('MikuMikuMouth')
OUTPUT_ARGS['MikuMikuMouth'] = {
    'host': '127.0.0.1',
    'port': 50082,
}
